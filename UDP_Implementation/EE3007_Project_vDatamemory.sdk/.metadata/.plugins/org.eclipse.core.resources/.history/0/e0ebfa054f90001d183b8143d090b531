/*
 * udp_main.c
 *
 *  Created on: 8 Oca 2023
 *      Author: SFG
 */

#include "xparameters.h"
#include "xil_exception.h"
#include "xscugic.h"
#include "xil_printf.h"
#include "unistd.h"
#include "xil_cache.h"
#include "stdio.h"
#include "stdlib.h"
#include "string.h"
#include "netif/xadapter.h"
#include "lwip/udp.h"
#include "xemacps.h"
#include "Datapath_IP_vDataMemoryInit.h"
#include "xgpio.h"
#include "xil_io.h"

XScuGic Intc;
XScuGic_Config *IntcConfig;

#define PLATFORM_EMAC_BASEADDR XPAR_XEMACPS_0_BASEADDR

static struct netif server_netif;
struct netif *echo_netif;
struct pbuf *p_dma;


u16_t remotePort = (u16_t)40501;
u16_t UDPPort = (u16_t)40501;
struct ip4_addr remoteAddr;

struct ip4_addr ipaddr, netmask, gw;
struct udp_pcb *pcb;

unsigned char mac_ethernet_address[] = {0xb0, 0x25, 0xaa, 0x30, 0x27, 0x4e};

XGpio datapath_out;

int  count, status, status2, led_check, datapath_out_check,decoder_out_check;


//functions
void lwip_init();
int SetupIntrSystem();
static void udp_recv_perf_callback(void *arg, struct udp_pcb *tpcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

int main(){
xil_printf("Start of the Program \r\n");
Xil_DCacheDisable();
err_t err = 0;

//u8 BufferPtr_tx[10]={'1','2','3','4',5,6,7,8,9,10};
u8 BufferPtr_rx[10]={0,0x0a,0x35,0,0,0,0,0,0,0};


XGpio_Initialize(&datapath_out,XPAR_DATAPATH_DEVICE_ID);
XGpio_SetDataDirection(&datapath_out,1,0x41200000);

//XGpio_Initialize(&decoder_out,XPAR_DECODER_OUT_DEVICE_ID);
//XGpio_SetDataDirection(&decoder_out,1,0x41210000);

echo_netif = &server_netif;
SetupIntrSystem();

//Initilize IP address to be used
IP4_ADDR(&ipaddr,     192, 168,  0,  10); //Zedboard address
IP4_ADDR(&netmask,    255, 255, 255,  0);
IP4_ADDR(&gw,         192, 168,  0,   1);
IP4_ADDR(&remoteAddr, 192, 168,  0,  21); // PC address

lwip_init();
if(!xemac_add(echo_netif, &ipaddr, &netmask, &gw, mac_ethernet_address, PLATFORM_EMAC_BASEADDR)){
	xil_printf("Error adding N/W Interface \n\r");
	return -1;
}

xil_printf("Setup Network Interface \n\r");
netif_set_default(echo_netif);
netif_set_up(echo_netif);

xil_printf("Create UDP server \n\r");

//pcb
pcb = udp_new();
udp_bind(pcb, &ipaddr, UDPPort);
//Specify callback to use for incoming connections
udp_recv(pcb, udp_recv_perf_callback, NULL);
xil_printf("Start server lwIp \n\r");
while(1){
	xemacif_input(echo_netif);

}
xil_printf("Close lwIp udp/ip server \r\n");
return 0;
}

int SetupIntrSystem(){
	int Status = 0;
	IntcConfig = XScuGic_LookupConfig(XPAR_SCUGIC_0_DEVICE_ID);
	if (NULL == IntcConfig){
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(&Intc,IntcConfig, IntcConfig->CpuBaseAddress);
	if(Status != XST_SUCCESS){
		return XST_FAILURE;
	}

	//Exception table initialize and register the interrupt
	//Controller handler with exception table

	Xil_ExceptionInit();
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler)XScuGic_InterruptHandler, &Intc);

	//enable non-critical exceptions
	Xil_ExceptionEnable();

	return 0;

}
static void udp_recv_perf_callback(void *arg, struct udp_pcb *tpcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
	u8* Data = p -> payload;
	char h[] = "Hello from zedboard";

	if(Data[0] == 0x8a) {
		xil_printf("Data[0] = 0x%1x \n\r", Data[0]);
		pbuf_free(p);
		p = pbuf_alloc(PBUF_TRANSPORT, sizeof(h), PBUF_POOL);
		memcpy(p->payload, &h, sizeof(h));
		udp_sendto(pcb, p, &remoteAddr, remotePort);
		pbuf_free(p);
		return;
	}

	udp_sendto(pcb, p, &remoteAddr, remotePort);
	pbuf_free(p);
	DATAPATH_IP_VDATAMEMORYINIT_mWriteReg(XPAR_DATAPATH_IP_VDATAMEM_0_S_AXI_BASEADDR,4,Data[0]);
	led_check = DATAPATH_IP_VDATAMEMORYINIT_mReadReg(XPAR_DATAPATH_IP_VDATAMEM_0_S_AXI_BASEADDR,4);
	datapath_out_check = XGpio_DiscreteRead(&datapath_out,1);
	//decoder_out_check = XGpio_DiscreteRead(&decoder_out,1);
	xil_printf("Get interrupt \n\r");

	print("-------------------------------------------- \n\r");
	printf("Sent Register Address Data from PC to board = %1x %1x %1x %1x %1x %1x \n\r", Data[0], Data[1], Data[2], Data[3], Data[4], Data[5]);
	//xil_printf("IP out = %1d \n\r",led_check);
	xil_printf("Datapath result in Reg[%d] = 0x%1x \n\r",Data[0],datapath_out_check);
	printf("Received Register Address Data from board to PC = %1x %1x %1x %1x %1x %1x \r", Data[0], Data[1], Data[2], Data[3], Data[4], Data[5]);
	printf("%c\n\r",Data[0]);
	print("-------------------------------------------- \n\r");
	return;
}






